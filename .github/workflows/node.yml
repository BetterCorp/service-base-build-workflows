name: Build Plugin

on:
  workflow_call:
    inputs:
      PUBLISH:
        type: boolean
        description: "Publish/No publish"
        required: true
      NPM_NAME:
        type: string
        description: "NPM Name"
        required: true
      NPM_EMAIL:
        type: string
        description: "NPM Email"
        required: true
    secrets:
      NPM_TOKEN_PUB:
        required: false
    outputs:
      version:
        description: "Version of the plugin"
        value: ${{ jobs.build_plugin.outputs.version }}

jobs:
  build_plugin:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.semver.outputs.version }}

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - run: npm i -g typescript ts-node
      - run: tsc -v ; ts-node -v ; node -v

      - name: Set version format
        id: version_format
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "master" ]]; then
            echo "{format}=${major}.${minor}.${patch}-rc${increment}" >> "$GITHUB_OUTPUT"
            echo "{tag}=rc" >> "$GITHUB_OUTPUT"
          elif [[ $BRANCH_NAME == "develop" || $BRANCH_NAME == "development" ]]; then
            echo "{format}=${major}.${minor}.${patch}-beta${increment}" >> "$GITHUB_OUTPUT"
            echo "{tag}=beta" >> "$GITHUB_OUTPUT"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "{format}=${major}.${minor}.${patch}" >> "$GITHUB_OUTPUT"
            echo "{tag}=latest" >> "$GITHUB_OUTPUT"
          else
            echo "{format}=${major}.${minor}.${patch}-alpha${increment}-${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
            echo "{tag}=alpha" >> "$GITHUB_OUTPUT"
          fi

      - name: semver
        id: semver
        uses: paulhatch/semantic-version@v4.0.3
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: ${{ steps.version_format.outputs.format }}
          change_path: "./"
          bump_each_commit: true

      - run: |
          git config user.name "${{ secrets.NPM_NAME }}";
          git config user.email "${{ secrets.NPM_EMAIL }}";
          echo "Hello $(git config --get user.name)";

      - run: npm version ${{ steps.semver.outputs.version }}

      - run: npm ci
      - run: npm run build

      - name: Create artifact
        run: |
          tar -czvf as-built.tar.gz --exclude=node_modules --exclude=.git ./

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: as-built
          path: ./as-built.tar.gz
          retention-days: 7

      - run: mkdir package-dist
      - run: npm pack --pack-destination package-dist/
      
      - name: Upload Package
        uses: actions/upload-artifact@v2
        with:
          name: built-package
          path: ./package-dist/
          retention-days: 7

      - run: rm -f ~/.npmrc ; rm -f ./.npmrc ; echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN_PUB }}" > ./.npmrc
        if: contains(matrix.node-version, '20.x') && inputs.PUBLISH == true

      - run: npm publish --tag ${{ steps.version_format.outputs.tag }}
        if: contains(matrix.node-version, '20.x') && inputs.PUBLISH == true

      - name: cleanup
        if: always()
        run: rm -f ~/.npmrc ; rm -f ./.npmrc;
