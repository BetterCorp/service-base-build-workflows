name: Build Plugin

on:
  workflow_call:
    inputs:
      PUBLISH:
        type: boolean
        description: "Publish/No publish"
        required: true
        default: false
      WORKING_DIR:
        type: string
        description: "Working directory"
        required: false
        default: "."
    secrets:
      NPM_READ_TOKEN:
        description: "NPM Token to read private dependencies"
        required: false
      NPM_PUBLISH_TOKEN:
        description: "NPM Token to publish"
        required: false
      NPM_NAME:
        description: "NPM Name"
        required: false
      NPM_EMAIL:
        description: "NPM Email"
        required: false
      CODECOV_TOKEN:
        description: "Codecov Token"
        required: false
    outputs:
      version:
        description: "Version of the plugin"
        value: ${{ jobs.build_plugin.outputs.version }}
      tag:
        description: "Tag of the plugin"
        value: ${{ jobs.build_plugin.outputs.tag }}

jobs:
  build_plugin:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.version_format.outputs.tag }}

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          cache-dependency-path: ${{ inputs.WORKING_DIR }}/package-lock.json
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          registry-url: 'https://registry.npmjs.org'

      - run: npm i -g typescript ts-node
        working-directory: ${{ inputs.WORKING_DIR }}
      - run: tsc -v ; ts-node -v ; node -v
        working-directory: ${{ inputs.WORKING_DIR }}

      - name: Set version format
        id: version_format
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ $BRANCH_NAME == "main" || $BRANCH_NAME == "master" ]]; then
            echo "xformat=\${major}.\${minor}.\${patch}-rc\${increment}" >> "$GITHUB_OUTPUT"
            echo "tag=rc" >> "$GITHUB_OUTPUT"
          elif [[ $BRANCH_NAME == "develop" || $BRANCH_NAME == "development" ]]; then
            echo "xformat=\${major}.\${minor}.\${patch}-beta\${increment}" >> "$GITHUB_OUTPUT"
            echo "tag=beta" >> "$GITHUB_OUTPUT"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "xformat=\${major}.\${minor}.\${patch}" >> "$GITHUB_OUTPUT"
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          else
            echo "xformat=\${major}.\${minor}.\${patch}-alpha\${increment}-${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
            echo "tag=alpha" >> "$GITHUB_OUTPUT"
          fi  
          echo "format=\${major}.\${minor}.\${patch}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: semver
        id: semver
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: ${{ steps.version_format.outputs.format }}
          change_path: "./"
          bump_each_commit: true

      - run: |
          if [[ -z "${{ secrets.NPM_NAME }}" || -z "${{ secrets.NPM_EMAIL }}" ]]; then
            git config user.name "Builder Squirrel";
            git config user.email "builder.squirrel@bettercorp.dev";
            echo "Hello $(git config --get user.name)";
          else
            git config user.name "${{ secrets.NPM_NAME }}";
            git config user.email "${{ secrets.NPM_EMAIL }}";
            echo "Hello $(git config --get user.name)";
          fi
        shell: bash

      - run: npm version ${{ steps.semver.outputs.version }} --no-git-tag-version
        working-directory: ${{ inputs.WORKING_DIR }}

      - run: npm ci
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_READ_TOKEN }}

      - uses: cloudposse/github-action-jq@main
        id: scriptslint
        with:
          compact: true
          input: "${{ inputs.WORKING_DIR }}/package.json"
          script: '.scripts.lint'

      - uses: cloudposse/github-action-jq@main
        id: scriptbuildrelease
        with:
          compact: true
          input: "${{ inputs.WORKING_DIR }}/package.json"
          script: '.scripts["build-release"]'

      - uses: cloudposse/github-action-jq@main
        id: scriptstest
        with:
          compact: true
          input: "${{ inputs.WORKING_DIR }}/package.json"
          script: '.scripts.test'

      - id: codecovcheck
        run: |
          if [[ -z "${{secrets.CODECOV_TOKEN}}" ]]; then
            echo "codecov=false" >> "$GITHUB_OUTPUT"
          else
            echo "codecov=true" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - run: npm run lint
        if: steps.scriptslint.outputs.output != 'null'
        working-directory: ${{ inputs.WORKING_DIR }}

      - run: npm run build-release
        if: steps.scriptbuildrelease.outputs.output != 'null'
        working-directory: ${{ inputs.WORKING_DIR }}

      - run: rm -rfv ./lib && rm -f ./tsconfig-release-ci.jzon && cp ./node_modules/@bettercorp/service-base/development/tsconfig-release.json ./tsconfig-release-ci.json && tsc -p ./tsconfig-release-ci.json
        if: steps.scriptbuildrelease.outputs.output == 'null'
        working-directory: ${{ inputs.WORKING_DIR }}

      - name: Run tests
        if: steps.scriptstest.outputs.output != 'null'
        run: npm run test
        working-directory: ${{ inputs.WORKING_DIR }}

      - name: Test Report ${{ matrix.node-version }}
        if: steps.scriptstest.outputs.output != 'null'
        uses: dorny/test-reporter@v1.7.0
        with:
          name: Tests
          path: "${{ inputs.WORKING_DIR }}/junit.json"
          reporter: mocha-json

      - name: Upload coverage reports to Codecov
        if: contains(matrix.node-version, '20.x') && steps.scriptstest.outputs.output != 'null' && steps.codecovcheck.outputs.codecov == 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: "${{ inputs.WORKING_DIR }}/coverage"

      - run: mkdir ci-build-dist
        working-directory: ${{ inputs.WORKING_DIR }}

      - name: Create artifact
        working-directory: ${{ inputs.WORKING_DIR }}
        run: |
          tar -czvf ci-build-dist/as-built.tar.gz --exclude=node_modules --exclude=.git --exclude=ci-build-dist ./

      - run: npm pack --pack-destination ci-build-dist/
        working-directory: ${{ inputs.WORKING_DIR }}
      
      - name: Upload Source
        uses: actions/upload-artifact@v4
        if: contains(matrix.node-version, '20.x') 
        with:
          name: node-${{ steps.version_format.outputs.tag }}-${{ steps.semver.outputs.version }}
          path: "${{ inputs.WORKING_DIR }}/ci-build-dist/*"
          if-no-files-found: error
          retention-days: 7

      - run: npm whoami
        if: contains(matrix.node-version, '20.x') && inputs.PUBLISH == true
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - run: npm publish --tag ${{ steps.version_format.outputs.tag }}
        if: contains(matrix.node-version, '20.x') && inputs.PUBLISH == true
        working-directory: ${{ inputs.WORKING_DIR }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
